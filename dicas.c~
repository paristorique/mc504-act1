#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "dicas.h"

//formato de cada quadrazinho do sudoku, com o numero de escolhas e as escolhas
typedef struct Kase Kase;

//formato usado para pasar os void*
typedef struct DataKase DataKase;


struct Kase {
	int numChoices;
	int* choices;
};

struct DataKase {
	Kase* sudoku;
	int* possibilities;
	int i;
};

//funcao para apagar as possibilidades com a linha
void checkLine(void* v){
struct DataKase* kos=v;
Kase* sudoku=(*kos).sudoku;
int i = (*kos).i;
int* possibilities= (*kos).possibilities;

int l = (i/9)*9;
int j;
//cada vez que tem um quadrado com nenhuma escolha possiveis na linha, apagamos esse numero
for(j=l;j<l+9;j++){
	if(sudoku[j].numChoices==0){
	possibilities[sudoku[j].choices[0]-1]=0;
	}
}
}

//funcao para apagar as possibilidades com a columna
void checkColumn(void* v){
struct DataKase* kos=v;
Kase* sudoku=(*kos).sudoku;
int i = (*kos).i;
int* possibilities= (*kos).possibilities;

int j = i%9;
//idem linha
	while(j<81){
		if(sudoku[j].numChoices==0){
		possibilities[sudoku[j].choices[0]-1]=0;
		}
	j=j+9;
	}
}

//funcao para apagar as possibilidades com o quadrinho
void checkSquare(void* v){
struct DataKase* kos=v;
Kase* sudoku=(*kos).sudoku;
int i = (*kos).i;
int* possibilities= (*kos).possibilities;
int l = (((i/9)/3)*3)*9+((i%9)/3)*3;
int k=l;
//idem linha
	while(k<l+21){
		if(sudoku[k].numChoices==0){
		possibilities[sudoku[k].choices[0]-1]=0;
		}
	k++;
	if(k%3==0){
		k=k+6;
		}
	}
}

//funcao para imprimir o resultado
void printSudoku(Kase* sudoku){
int i,j;
printf("Resultado : \n");
for(i=0;i<81;i++){

	if(sudoku[i].numChoices==0){
	printf("%d ", sudoku[i].choices[0]);
	} else {
	printf("(");
	for(j=0;j<sudoku[i].numChoices;j++){
		printf("%d",sudoku[i].choices[j]);
		}
	printf(") ");
	}

	if((i+1)%9==0){
	printf("\n");	
	}

}

}

//funcao principal
int dica(){
pthread_t thr[243]; //3 x 81 threads
  short int *retorno;
  char *sudoku = malloc(81*sizeof(char));
struct Kase* sudokuKase = malloc(81*sizeof(Kase));
struct DataKase dataKase;
  int i=0, j=0, k=0;
  short int *ja;
  printf("Escrever o Sudoku  linha por linha\n");

  scanf( "%c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c", &sudoku[0], &sudoku[1], &sudoku[2],&sudoku[3],&sudoku[4],&sudoku[5],&sudoku[6],&sudoku[7],&sudoku[8],&sudoku[9],&sudoku[10], &sudoku[11], &sudoku[12],&sudoku[13],&sudoku[14],&sudoku[15],&sudoku[16],&sudoku[17],&sudoku[18],&sudoku[19],&sudoku[20], &sudoku[21], &sudoku[22],&sudoku[23],&sudoku[24],&sudoku[25],&sudoku[26],&sudoku[27],&sudoku[28],&sudoku[29],&sudoku[30], &sudoku[31], &sudoku[32],&sudoku[33],&sudoku[34],&sudoku[35],&sudoku[36],&sudoku[37],&sudoku[38],&sudoku[39],&sudoku[40], &sudoku[41], &sudoku[42],&sudoku[43],&sudoku[44],&sudoku[45],&sudoku[46],&sudoku[47],&sudoku[48],&sudoku[49],&sudoku[50], &sudoku[51], &sudoku[52],&sudoku[53],&sudoku[54],&sudoku[55],&sudoku[56],&sudoku[57],&sudoku[58],&sudoku[59],&sudoku[60], &sudoku[61], &sudoku[62],&sudoku[63],&sudoku[64],&sudoku[65],&sudoku[66],&sudoku[67],&sudoku[68],&sudoku[69],&sudoku[70], &sudoku[71], &sudoku[72],&sudoku[73],&sudoku[74],&sudoku[75],&sudoku[76],&sudoku[77],&sudoku[78],&sudoku[79],&sudoku[80]);

//conversao do sudoku escrito em um sudoku de Kase
for(i=0;i<81;i++){
	if(sudoku[i]!=88){
		sudokuKase[i].choices = malloc(sizeof(int));
		sudokuKase[i].choices[0]=(sudoku[i]-48);	
		sudokuKase[i].numChoices=0;
	} else {
	//quando tem um 'X', clocamos o numero de escolhas igual a -1 e preparamos um vetor das escolhas possiveis.
		sudokuKase[i].choices=malloc(9*sizeof(int));	
		sudokuKase[i].numChoices=-1;
	}

}

dataKase.sudoku=sudokuKase;


//vamos ver agora os 'X' (convertido em int 0 antes) e ver os escolhas possiveis por linha, columna e quadrinho
for(i=0;i<81;i++){
	if(sudokuKase[i].numChoices==(-1)){
	sudokuKase[i].numChoices==0;
	k=0;
	int* possibilities = malloc(9*sizeof(int));
	for(j=0;j<9;j++){
		possibilities[j]=1;
	}
	dataKase.possibilities = possibilities;
	dataKase.i=i;

	//criacao dos thread, um para a linha, outro para a columna e ultimo para o quadrinho. Não tem problemas se eles são executados em paralelos.
	pthread_create(&thr[i], NULL, checkLine, (void*) &dataKase);usleep(1000);
 	pthread_create(&thr[i+81], NULL, checkColumn, (void*) &dataKase);usleep(1000);
 	pthread_create(&thr[i+162], NULL, checkSquare, (void*) &dataKase);usleep(1000);
	pthread_join(thr[i], NULL);
	pthread_join(thr[i+81], NULL);
	pthread_join(thr[i+162], NULL);


	for(j=0;j<9;j++){
		if(possibilities[j]==1){
		sudokuKase[i].choices[k]=j+1;
		k++;
		}
	}
	sudokuKase[i].numChoices=k;

	}
}
	printSudoku(sudokuKase);

  return 0;

}

//funcao main
int main(){
  dica();
  return 0;
}

